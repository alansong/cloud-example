server:
  servlet:
    context-path: /sso
  port: 21001
  undertow:
  # 设置IO线程数, 它主要执行非阻塞的任务,它们会负责多个连接, 默认设置每个CPU核心一个线程
      io-threads: 4
      # 阻塞任务线程池
      worker-threads: 50
      buffer-size: 512
      buffers-per-region: 1024
      direct-buffers: true

spring:
  application:
      name: example-sso-web-dev
  servlet:
    multipart:
      # 上传文件的临时目录 （linux的默认临时目录定时会被删除会导致上传失败，尽量指定临时目录）
      location: /data/tmp
      # 是否支持批量上传   (默认值 true)
      enabled: true
      # 上传文件最大为 1M （默认值 1M 根据自身业务自行控制即可）
      max-file-size: 1MB
      # 设置总上传的数据大小 10M（默认值10M 根据自身业务自行控制即可）
      max-request-size: 1MB
      # 文件大小阈值，当大于这个阈值时将写入到磁盘，否则存在内存中，（默认值0 一般情况下不用特意修改）
      file-size-threshold: 0

#redis 配置
  redis:
#    host: 127.0.0.1
    host: 47.93.101.163
    port: 6379
# redis 连接池
    # 连接池最大连接数（使用负值表示没有限制）
    pool:
      max-active: 20
      #连接池最大阻塞等待时间（使用负值表示没有限制）
      max-wait: -1
      #  连接池中的最大空闲连接
      max-idle: 8
      min-idle: 1
    timeout: 0
  jackson:
    timeZone: GMT+8
    dateFormat: yyyy-MM-dd HH:mm:ss
# cache
  cache:
    type: redis # 指定缓存为redis
eureka:
  client:
    register-with-eureka: false
    fetch-registry: true
    healthcheck:
      enabled: false
    serviceUrl:
      defaultZone: http://127.0.0.1:8761/eureka/

#开启hystrix
feign:
  hystrix:
    enabled: true

#hystrix的超时时间
hystrix:
  command:
    default:
      execution:
        timeout:
          enabled: true
        isolation:
          thread:
            timeoutInMilliseconds: 9000
#设置ribbon重试间隔
ribbon:
  ReadTimeout: 3000
  ConnectTimeout: 3000
  MaxAutoRetries: 1 #同一台实例最大重试次数,不包括首次调用
  MaxAutoRetriesNextServer: 1 #重试负载均衡其他的实例最大重试次数,不包括首次调用
  OkToRetryOnAllOperations: false  #是否所有操作都重试


#服务地址
service:
  url:
    user: http://userService-dev/